// Code generated by mockery v2.46.3. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	services "github.com/a-novel/uservice-passkeys/pkg/services"
	mock "github.com/stretchr/testify/mock"
)

// MockCreatePasskey is an autogenerated mock type for the CreatePasskey type
type MockCreatePasskey struct {
	mock.Mock
}

type MockCreatePasskey_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreatePasskey) EXPECT() *MockCreatePasskey_Expecter {
	return &MockCreatePasskey_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, data
func (_m *MockCreatePasskey) Exec(ctx context.Context, data *services.CreatePasskeyRequest) (*services.CreatePasskeyResponse, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *services.CreatePasskeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.CreatePasskeyRequest) (*services.CreatePasskeyResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services.CreatePasskeyRequest) *services.CreatePasskeyResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.CreatePasskeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services.CreatePasskeyRequest) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreatePasskey_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockCreatePasskey_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - data *services.CreatePasskeyRequest
func (_e *MockCreatePasskey_Expecter) Exec(ctx interface{}, data interface{}) *MockCreatePasskey_Exec_Call {
	return &MockCreatePasskey_Exec_Call{Call: _e.mock.On("Exec", ctx, data)}
}

func (_c *MockCreatePasskey_Exec_Call) Run(run func(ctx context.Context, data *services.CreatePasskeyRequest)) *MockCreatePasskey_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.CreatePasskeyRequest))
	})
	return _c
}

func (_c *MockCreatePasskey_Exec_Call) Return(_a0 *services.CreatePasskeyResponse, _a1 error) *MockCreatePasskey_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreatePasskey_Exec_Call) RunAndReturn(run func(context.Context, *services.CreatePasskeyRequest) (*services.CreatePasskeyResponse, error)) *MockCreatePasskey_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreatePasskey creates a new instance of MockCreatePasskey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreatePasskey(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreatePasskey {
	mock := &MockCreatePasskey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
