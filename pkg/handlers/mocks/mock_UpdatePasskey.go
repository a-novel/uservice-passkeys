// Code generated by mockery v2.46.3. DO NOT EDIT.

package handlersmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	passkeysv1 "buf.build/gen/go/a-novel/proto/protocolbuffers/go/passkeys/v1"
)

// MockUpdatePasskey is an autogenerated mock type for the UpdatePasskey type
type MockUpdatePasskey struct {
	mock.Mock
}

type MockUpdatePasskey_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdatePasskey) EXPECT() *MockUpdatePasskey_Expecter {
	return &MockUpdatePasskey_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: _a0, _a1
func (_m *MockUpdatePasskey) Exec(_a0 context.Context, _a1 *passkeysv1.UpdateServiceExecRequest) (*passkeysv1.UpdateServiceExecResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *passkeysv1.UpdateServiceExecResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *passkeysv1.UpdateServiceExecRequest) (*passkeysv1.UpdateServiceExecResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *passkeysv1.UpdateServiceExecRequest) *passkeysv1.UpdateServiceExecResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*passkeysv1.UpdateServiceExecResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *passkeysv1.UpdateServiceExecRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdatePasskey_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockUpdatePasskey_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *passkeysv1.UpdateServiceExecRequest
func (_e *MockUpdatePasskey_Expecter) Exec(_a0 interface{}, _a1 interface{}) *MockUpdatePasskey_Exec_Call {
	return &MockUpdatePasskey_Exec_Call{Call: _e.mock.On("Exec", _a0, _a1)}
}

func (_c *MockUpdatePasskey_Exec_Call) Run(run func(_a0 context.Context, _a1 *passkeysv1.UpdateServiceExecRequest)) *MockUpdatePasskey_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*passkeysv1.UpdateServiceExecRequest))
	})
	return _c
}

func (_c *MockUpdatePasskey_Exec_Call) Return(_a0 *passkeysv1.UpdateServiceExecResponse, _a1 error) *MockUpdatePasskey_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdatePasskey_Exec_Call) RunAndReturn(run func(context.Context, *passkeysv1.UpdateServiceExecRequest) (*passkeysv1.UpdateServiceExecResponse, error)) *MockUpdatePasskey_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdatePasskey creates a new instance of MockUpdatePasskey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdatePasskey(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdatePasskey {
	mock := &MockUpdatePasskey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
